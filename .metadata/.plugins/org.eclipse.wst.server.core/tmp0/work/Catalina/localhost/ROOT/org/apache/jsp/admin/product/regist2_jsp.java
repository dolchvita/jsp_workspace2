/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-26 07:27:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.jspshop.exception.PimgException;
import com.jspshop.repository.PimgDAO;
import com.jspshop.exception.PsizeException;
import com.jspshop.repository.PsizeDAO;
import com.jspshop.exception.ColorException;
import com.google.gson.Gson;
import com.jspshop.util.MessageObject;
import com.jspshop.exception.ProductException;
import com.jspshop.repository.ColorDAO;
import org.apache.ibatis.session.SqlSession;
import com.jspshop.mybatis.MybatisConfig;
import com.jspshop.repository.ProductDAO;
import com.jspshop.domain.Pimg;
import com.jspshop.util.FileManager;
import java.util.ArrayList;
import com.jspshop.domain.Color;
import com.jspshop.domain.Psize;
import com.jspshop.domain.Category;
import com.jspshop.domain.Product;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import java.io.File;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;

public final class regist2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	MybatisConfig mybatisConfig=MybatisConfig.getInstance();
	ProductDAO productDAO=new ProductDAO();
	PsizeDAO psizeDAO=new PsizeDAO();
	ColorDAO colorDAO=new ColorDAO();
	PimgDAO pimgDAO=new PimgDAO();
	// DAO는 언제 호출할까? --> DB 작업이기 때문에 쿼리문 시행 전에 하면 됨!
	

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.jspshop.mybatis.MybatisConfig");
    _jspx_imports_classes.add("com.jspshop.repository.ProductDAO");
    _jspx_imports_classes.add("com.jspshop.repository.PimgDAO");
    _jspx_imports_classes.add("com.jspshop.repository.PsizeDAO");
    _jspx_imports_classes.add("com.jspshop.domain.Product");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("com.jspshop.util.MessageObject");
    _jspx_imports_classes.add("com.jspshop.domain.Color");
    _jspx_imports_classes.add("com.jspshop.util.FileManager");
    _jspx_imports_classes.add("com.jspshop.domain.Category");
    _jspx_imports_classes.add("com.jspshop.exception.PimgException");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.jspshop.domain.Psize");
    _jspx_imports_classes.add("com.jspshop.repository.ColorDAO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.jspshop.exception.ColorException");
    _jspx_imports_classes.add("com.jspshop.domain.Pimg");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("com.jspshop.exception.PsizeException");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("com.jspshop.exception.ProductException");
    _jspx_imports_classes.add("org.apache.ibatis.session.SqlSession");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

	
	int maxSize=5*1024*1024;
	// application 객체는 서비스 메서드 안에서 수행되는 내장객체!
	String path=application.getRealPath("/data/");
	System.out.println(path);
	DiskFileItemFactory factory=new DiskFileItemFactory();
	
	factory.setSizeThreshold(maxSize);
	factory.setRepository(new File(path));
	
	ServletFileUpload upload=new ServletFileUpload(factory);
	List<FileItem> itemList=upload.parseRequest(request);

	
	Product product=new Product();

	// psize와 color 의 생성 시점은?
	/* 얘네는 등록시 하나의 DTO를 생성하는 게 아니라, 선택한 체크박스만큼 
		DTO들이 생성되어 하나의 Product가 가진 List 안에 채워져야 한다!
		따라서, 각각 생성된 DTO들을 담을 리스트를 하나 명시하고 Product의 멤벼변수로 엮는다
	*/
	List<Psize> psizeList=new ArrayList<Psize>();
	List<Color> colorList=new ArrayList<Color>();
	List<Pimg> pimgList=new ArrayList<Pimg>();
	product.setPsizeList(psizeList);
	product.setColorList(colorList);
	product.setPimgList(pimgList);

	
	for(FileItem item:itemList){
		if(item.isFormField()){
			
			if(item.getFieldName().equals("category_idx")){
				Category category=new Category();
				category.setCategory_idx(Integer.parseInt(item.getString("utf-8")));
				product.setCategory(category);
				
			}else if(item.getFieldName().equals("product_name")){
				product.setProduct_name(item.getString("utf-8"));
				
			}else if(item.getFieldName().equals("brand")){
				product.setBrand(item.getString("utf-8"));
				
			}else if(item.getFieldName().equals("price")){
				product.setPrice(Integer.parseInt(item.getString("utf-8")));
				
			}else if(item.getFieldName().equals("discount")){
				product.setDiscount(Integer.parseInt(item.getString("utf-8")));
			
			}else if(item.getFieldName().equals("size[]")){
				
				String[] psize=item.getString("utf-8").split(",");
				
				System.out.println("psize 배열 크기는 "+psize.length);
				
				for(int i=0;i<psize.length;i++){
					// 배열 개수만큼 DTO 생성하기!
					Psize psizeObj=new Psize();
					psizeObj.setProduct(product);
					psizeObj.setPsize_name(psize[i]);
					
					// 생성된 DTO들이 보관될 수 있게 하자!
					psizeList.add(psizeObj);
				}
				
			}else if(item.getFieldName().equals("color[]")){
				String[] color=item.getString("utf-8").split(",");

				for(int i=0; i<color.length; i++){
					// 배열 개수만큼 DTO 생성하기!
					Color colorObj=new Color();
					colorObj.setProduct(product);
					colorObj.setColor_name(color[i]);
					// 생성된 DTO들이 보관될 수 있게 하자!
					colorList.add(colorObj);
				}
				
			}else if(item.getFieldName().equals("detail")){
				product.setDetail(item.getString("utf-8"));	
			}
			
		}else{		// 파일 업로드라면!
			// 파일 이름을 지정해서 write()하자!
			long time=System.currentTimeMillis();
		
			// 파일의 이름 가져오기 getName()
			String ext=FileManager.getExt(item.getName());
			String filename=time+"."+ext;
			item.write(new File(path+filename));
			
			//System.out.print("파일 이름 "+filename);
			// DTO 세팅!
			Pimg pimg=new Pimg();
			pimg.setProduct(product);
			pimg.setFilename(filename);
			pimgList.add(pimg);
		}
	}
	
	//System.out.print("이미지 리스트! "+pimgList);
	
	
	SqlSession sqlSession=mybatisConfig.getSqlSession();
	MessageObject messageObject=new MessageObject();		// 3 결과값을 전달할 객체
	// 뭘 어떻게 전달할 건데?
			
	try{
		productDAO.setSqlSession(sqlSession);
		// 1-1) 이 메서드 호출시 강요되지 않은 예외가 걸려있다! -- try 문 수행하기 
		productDAO.insert(product);
		
				
		// -- 세부업무 시작! --
		
		/* 뽀인트 2 insert시 들어가게 될 컬러 DTO들은 어디서 꺼내온다?
		 	Product의 멤버변수 List에 담겨 있다!
		 	2-1) 모두 트랜잭션으로 묶여 있기 때문에 "예외처리"가 걸려있다는 것	
			2-2) 실제 DTO들이 담겨있는 건 위의 공장 과정을 거친 Product 내의 List 멤버변수이다.
					때문에 실제 DTO에서 getter 호출해야 함!!!
		*/
		
		psizeDAO.setSqlSession(sqlSession);
		for(Psize psize:product.getPsizeList()){
			psizeDAO.insert(psize);
		}
		
		colorDAO.setSqlSession(sqlSession);
		for(Color color:product.getColorList()){
			colorDAO.insert(color);
		}
		
		pimgDAO.setSqlSession(sqlSession);
		for(Pimg pimg:product.getPimgList()){
			pimgDAO.insert(pimg);
		}
		
		sqlSession.commit();
		
		// 3-1) 성공했다고 알려주기
		// out.print의 값을 비동기로 받으니까 
		messageObject.setCode(1);
		messageObject.setMsg("등록 성공 ");
				
	}catch(ProductException e){
		sqlSession.rollback();
		messageObject.setCode(0);
		
		// 3-2) 예외 객체가 이미 전달된 상태이니까 심어놓은 메세지 꺼내 쓸 것!
		messageObject.setMsg(e.getMessage());
		
	}catch(PsizeException e){
		sqlSession.rollback();
		messageObject.setCode(0);
		messageObject.setMsg(e.getMessage());
		
	}catch(ColorException e){
		sqlSession.rollback();
		messageObject.setCode(0);
		messageObject.setMsg(e.getMessage());
		
	}catch(PimgException e){
		sqlSession.rollback();
		messageObject.setCode(0);
		messageObject.setMsg(e.getMessage());
		
	}finally{
		mybatisConfig.release(sqlSession);
	}
	
	
	/* 3-3) 서버에서 받을 수 있게 처리하자
		문자열이 모아진 상태에서 보내야 하겠지,
		그래서 messageObject를 통째로 보낸다.
			-- 멤버변수가 key 안에 담긴 데이터가 value가 되어 json화 될 것이기 때문!
	*/
	Gson gson=new Gson();
	String json=gson.toJson(messageObject);
	out.print(json);
	

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
